[MySQL 서버에 접속]
> mysql -u 사용자아이디 -p
password: 암호입력

[MySQL 사용자 추가]
> CREATE USER '사용자아이디'@'서버주소' IDENTIFIED BY '암호';

로컬에서만 접속할 수 있는 사용자를 만들기:
> CREATE USER 'java89'@'localhost' IDENTIFIED BY '1111';
  => 이 경우 java89 사용자는 오직 로컬(서버를 실행하는 컴퓨터)에서만 접속 가능한다.
  => 다른 컴퓨터에서 실행하는 MySQL 서버에 접속할 수 없다는 것을 의미한다.

원격에서만 접속할 수 있는 사용자를 만들기:
> CREATE USER 'java89'@'%' IDENTIFIED BY '1111';
  => 이 경우 java89 사용자는 원력에서만 접속 가능하다.

[MySQL 사용자 목록 조회]
> select user from mysql.user;

[MySQL 데이터베이스 생성]
> CREATE DATABASE java89db
  DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;

[MySQL 사용자에게 데이터베이스 사용 권한 부여]
> GRANT ALL ON 데이터베이스명.* TO '사용자아이디'@'서버주소';
> GRANT ALL ON java89db.* TO 'java89'@'localhost';

[데이터베이스 목록 조회]
> show databases;

[사용자 교체]
> quit    (프로그램 종료 후)
> mysql -u java89 -p   (다시 실행)

[데이터베이스 사용]
> use 데이터베이스명
> use java89db;

[데이터베이스의 전체 테이블 목록 조회]
> show tables;

[예제 테이블 생성]
> create table 테이블명
  컬럼명 타입 NULL여부,
  컬럼명 타입 NULL여부,
  ...
  컬럼명 타입 NULL여부;

> create table ex_contacts (
    name varchar(50) not null,
    posi varchar(20),
    tel varchar(20),
    email varchar(50) not null
  );

  create table ex_students (
    uid varchar(20) not null,
    pwd varchar(20) not null,
    name varchar(20) not null,
    tel varchar(20),
    email varchar(50) not null,
    work char(1) not null,
    byear int,
    schl varchar(30)
  );

[테이블의 데이터를 구분하는 식별자(Primary Key; PK)로 사용할 컬럼 지정]
> alter table 테이블명
  add primary key (컬럼명, 컬럼명, ...);
> alter table ex_contacts
  add primary key (email);
  alter table ex_students
  add primary key (uid);

=> PK는 아니지만 중복되어서는 안되는 컬럼인 경우 다음과 같이 유니크 컬럼으로 지정한다.
  alter table ex_students
  add unique index (email);

[테이블 삭제]
> drop table 테이블명;
> drop table ex_contacts;

[테이블의 상세 정보 출력]
> desc 테이블명;
> describe 테이블명;
> desc ex_contacts;

[테이블에 데이터 입력]
> insert into 테이블명(컬럼명, 컬럼명, ...)
  values(값, 값, ...);
> 
 insert into ex_contacts(email, name, tel, posi)
  values('aaa@test.com', 'aaa', '111-1111', '대리');
 insert into ex_contacts(email, name, tel, posi)
  values('bbb@test.com', 'bbb', '111-1112', '대리');
 insert into ex_contacts(email, name, tel, posi)
  values('ccc@test.com', 'ccc', '111-1113', '과장');
 insert into ex_contacts(email, name, tel, posi)
  values('ddd@test.com', 'ddd', '111-1114', '부장');
 insert into ex_contacts(email, name, tel, posi)
  values('eee@test.com', 'eee', '111-1111', '차장');

 insert into ex_students(uid, pwd, name, email, work)
 values('aaa', '1111', '홍길동', 'hong@test.com', 'Y');
 insert into ex_students(uid, pwd, name, email, work)
 values('bbb', '1111', '홍길동2', 'hong2@test.com', 'N');
 insert into ex_students(uid, pwd, name, email, work)
 values('ccc', '1111', '홍길동3', 'hong3@test.com', 'Y');
 insert into ex_students(uid, pwd, name, email, work)
 values('ddd', '1111', '홍길동4', 'hong4@test.com', 'N');
 insert into ex_students(uid, pwd, name, email, work)
 values('eee', '1111', '홍길동5', 'hong5@test.com', 'Y');

=> 만약 이메일 컬럼의 값이 중복된다면 insert를 허락하지 않는다.
 insert into ex_students(uid, pwd, name, email, work)
 values('xxx', '1111', '홍길동5', 'hong5@test.com', 'Y');

[테이블의 데이터 조회]
> select 컬럼명, 컬러명, ...
  from 테이블명
  where 조건...;
> select *
  from ex_contacts;
> select *
  from ex_contacts
  where name='aaa';
> select name, tel
  from ex_contacts;

[테이블의 데이터 변경]
> update 테이블명 set
  컬럼명=값,
  컬럼명=값,
  ...
  where 조건...;

> update ex_contacts set
  name='홍길동',
  tel='111-2222'
  where email='aaa@test.com';

[테이블의 데이터 삭제]
> delete from 테이블명
  where 조건...;
> delete from ex_contacts
  where email='ccc@test.com';
